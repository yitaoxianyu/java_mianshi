什么是进程,线程,并发和并行?

进程 : 一个在运行的程序就可以认为是一个进程

线程 : 程序中所执行的一个任务就可以认为是一个线程

并发 : 指的是cpu中的一个核心来执行多个任务(cpu来回进行线程切换,可能会导致线程安全)

并行 : 指的是cpu中的多个核心来执行多个任务

线程休眠 : 如果想让其中一个线程在执行中不执行可以调用sleep方法,之后这个线程会休眠cpu去处理其他的线程

线程插队 : 在demo01中,先开启了自己定义的线程,之后在执行main函数中的循环他们会并发执行,假如想让cpu先处理
其中一个线程可以调用join方法(join方法可以将调用方法的父线程先停止掉)

什么是线程安全?
线程安全 : 是指在多个线程同时竞争一个共享资源的时候可能会导致操作的有效性失效,例如Demo02中,a最终进行打印并不是500

乐观锁的定义 : 乐观锁是解决线程安全的一种思想,它并不是实际意义上的锁,在线程执行提交过程时,它会检验此时的资源是否被修改了
一旦被修改那么这个线程执行会重新执行(失败重新执行叫做自旋)他的具体体现有cas,compare and swap

悲观锁的定义 : 悲观锁,认为线程总会发生安全,在每次进行对数据修改时会进行争抢锁之后才能进行对数据进行修改,java中可以使用synchronized或者lock
先争抢到锁的线程会优先执行,不会进行正常的线程切换而是会执行完释放之后其他线程再去争抢锁(顺序为串行)
作用范围 : 代码块,对象中的方法