什么是进程,线程,并发和并行?

进程 : 一个在运行的程序就可以认为是一个进程

线程 : 程序中所执行的一个任务就可以认为是一个线程

并发 : 指的是cpu中的一个核心来执行多个任务(cpu来回进行线程切换,可能会导致线程安全)

并行 : 指的是cpu中的多个核心来执行多个任务

线程休眠 : 如果想让其中一个线程在执行中不执行可以调用sleep方法,之后这个线程会休眠cpu去处理其他的线程

线程插队 : 在demo01中,先开启了自己定义的线程,之后在执行main函数中的循环他们会并发执行,假如想让cpu先处理
其中一个线程可以调用join方法(join方法可以将调用方法的父线程先停止掉)

什么是线程安全?
线程安全 : 是指在多个线程同时竞争一个共享资源的时候可能会导致操作的有效性失效,例如Demo02中,a最终进行打印并不是500

乐观锁的定义 : 乐观锁是解决线程安全的一种思想,它并不是实际意义上的锁,在线程执行提交过程时,它会检验此时的资源是否被修改了
一旦被修改那么这个线程执行会重新执行(失败重新执行叫做自旋)他的具体体现有cas,compare and swap

悲观锁的定义 : 悲观锁,认为线程总会发生安全,在每次进行对数据修改时会进行争抢锁之后才能进行对数据进行修改,java中可以使用synchronized或者lock
先争抢到锁的线程会优先执行,不会进行正常的线程切换而是会执行完释放之后其他线程再去争抢锁(顺序为串行)
作用范围 : 代码块,对象中的方法

锁的升级 :
1 偏向锁 : 假如有一个场景,在只有单线程时,执行任务时会有锁(这是因为,在实际中线程数是不确定的所以要保证并发安全),但是这个线程中不会对锁来回释放和获取
这个机制在jdk1.6时更新,这样提升了锁的性能,但是当其他线程存在时,这个锁会变成轻量级锁

2 轻量级锁 :

3 重量级锁 :

4 锁的可重入性 : 假如同一个线程,获取一个锁两次或者多次,假如是按照这个锁是否被获取作为重入条件的话,会产生一个问题,第一次获取没有问题但是这个线程要是
注 : synchronized是可重入锁(每次获取锁记录次数++)

5 对象头 :
mark word
    锁标志
        无锁 01   偏向锁 01  轻量级锁 00    重量级锁 10
    是否是偏向锁
        无锁 0    偏向锁  1
    无锁 hashcode  分代年龄
    偏向锁  线程ID  分代年龄
    轻量级  指向栈中锁记录的指针
    重量级锁  monitor对象
klass point  类指针
如果是数组还要记录数组长度
Monitor
    次数
    entrylist
    waitset
    所有者


对于一个变量 :
AtomicReference : 可以传入初始值,并且他的compare and set是可以保证原子性的(使用传统的if判断不能保证原子性操作)
AtomicStampReference : 传入两个参数,一个是初始值另一个是版本号,可以保证aba的问题发生
对于对象中的一个字段 :
可以使用AtomicFieldUpdater(字段必须设置为public,并且不能被static修饰,并且为基本数据类型)


