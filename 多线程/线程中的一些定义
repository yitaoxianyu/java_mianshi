什么是进程,线程,并发和并行?

进程 : 一个在运行的程序就可以认为是一个进程

线程 : 程序中所执行的一个任务就可以认为是一个线程

并发 : 指的是cpu中的一个核心来执行多个任务(cpu来回进行线程切换,可能会导致线程安全)

并行 : 指的是cpu中的多个核心来执行多个任务

数据结构算法，计算机网络，操作系统，数据库，组成原理，分库分表，sharding-jdbc,

线程休眠 : 如果想让其中一个线程在执行中不执行可以调用sleep方法,之后这个线程会休眠cpu去处理其他的线程

线程插队 : 在demo01中,先开启了自己定义的线程,之后在执行main函数中的循环他们会并发执行,假如想让cpu先处理
其中一个线程可以调用join方法(join方法可以将调用方法的父线程先停止掉)

线程的内存结构 :
栈内存 :  每个线程都有自己的栈空间，用于存储局部变量、函数调用信息和返回地址。栈是线程私有的，不同线程的栈之间不会相互干扰。
堆内存 : 所有线程共享同一进程的堆内存。堆用于动态分配内存（例如，通过 malloc 或 new）。多个线程可以同时访问和修改堆中的数据，但这也意味着需要额外的同步机制（如互斥锁）来防止数据竞争和不一致。


什么是线程安全?
线程安全 : 是指在多个线程同时竞争一个共享资源的时候可能会导致操作的有效性失效,例如Demo02中,a最终进行打印并不是500

乐观锁的定义 : 乐观锁是解决线程安全的一种思想,它并不是实际意义上的锁,在线程执行提交过程时,它会检验此时的资源是否被修改了
一旦被修改那么这个线程执行会重新执行(失败重新执行叫做自旋)他的具体体现有cas,compare and swap

悲观锁的定义 : 悲观锁,认为线程总会发生安全,在每次进行对数据修改时会进行争抢锁之后才能进行对数据进行修改,java中可以使用synchronized或者lock
先争抢到锁的线程会优先执行,不会进行正常的线程切换而是会执行完释放之后其他线程再去争抢锁(顺序为串行)

实现悲观锁的方法 :
1 : 使用synchronized关键字
作用范围 : 代码块,对象中的方法
特点 : 不用手动释放并且是非公平锁,不用维护一个线程队列性能更好
2 : 使用ReentrantLock
作用范围 : 更广可以在任何步骤都可以,只需要在需要保证线程安全的地方加锁和解锁(注意在使用lock方法时,不能将lock方法放到try代码块中,假如没有获取到会导致连续的抛出异常)
特点 : 可以自己传入参数,指定为公平或者非公平锁
底层实现 : 多个线程去竞争这个锁的时候,都会对ReentrantLock的状态值(0为可获取,大于0代表被获取)进行cas,对于进行cas成功的线程可以进行后续操作
对于对状态值进行修改失败的线程首先会进行几次自旋(再次进行几次cas),如果几次自旋失败后会将线程信息记录到ReentrantLock维护的一个双向链表中,
这个链表的头节点永远为空只会存放一个状态值,锁的状态值为0时第一个有值的节点被唤醒进行争抢(注意 : 这里虽然使用了双向链表维护了争抢锁的有序性,但是还是一个非公平锁因为可能会有其他线程进行自旋,此时就不会进行争抢)
当这个节点获取到锁之后,他的值会被置为null并且状态值改变为-1表示他后面节点的线程还没有被唤醒

synchronized和ReentrantLock的区别 :
底层实现不同 : synchronized底层是使用Monitor对象实现的但是ReentrantLock底层是使用AQS维护一个双向链表实现的
synchronized是一个关键字,由jvm实现而ReentrantLock是一个类
synchronized是非公平锁而ReentrantLock可以进行选择公平锁或者非公平锁
synchronized不可中断ReentrantLock可以中断
synchronized会自动释放而ReentrantLock需要手动调用获取锁和释放锁

锁的升级 :
1 偏向锁 : 假如有一个场景,在只有单线程时,执行任务时会有锁(这是因为,在实际中线程数是不确定的所以要保证并发安全),但是这个线程中不会对锁来回释放和获取
这个机制在jdk1.6时更新,这样提升了锁的性能,但是当其他线程存在时,这个锁会变成轻量级锁,这个底层原理为每次获取时会检查线程的id

2 轻量级锁 : 轻量级锁指的是,多个线程争抢它时并不会进行线程的挂起和唤醒而是,没有争抢到的线程会进行自旋

3 重量级锁 : 重量级锁指的是,多个线程争抢它时,没有争抢到的线程会进行休眠

4 锁的可重入性 : 假如同一个线程,获取一个锁两次或者多次,假如是按照这个锁是否被获取作为重入条件的话,会产生一个问题,第一次获取没有问题但是这个线程要是可能会继续获取
这里如果只是判断锁是否被获取,会导致资源互斥(即锁无法被释放并且锁有不能被获得即为死锁)
注 : synchronized是可重入锁(每次获取锁记录次数++)

5 对象头 :
mark word
    锁标志
        无锁 01   偏向锁 01  轻量级锁 00    重量级锁 10
    是否是偏向锁
        无锁 0    偏向锁  1
    无锁 hashcode  分代年龄
    偏向锁  线程ID
    轻量级  指向栈中锁记录的指针
    重量级锁  monitor对象
klass point  类指针
如果是数组还要记录数组长度
Monitor
    次数
    entrylist
    waitset
    所有者


对于一个变量 :
AtomicReference : 可以传入初始值,并且他的compare and swap是可以保证原子性的(使用传统的if判断不能保证原子性操作)
AtomicStampReference : 传入两个参数,一个是初始值另一个是版本号,可以保证aba的问题发生
对于对象中的一个字段 :
可以使用AtomicFieldUpdater(字段必须设置为public,并且不能被static修饰,并且为基本数据类型)


如何保证线程安全?
前置知识 : MESI协议保证缓存一致性
缓存的四种状态
M : 修改状态
E : 独享状态
S : 共享状态
I : 失效状态

多个线程共享一个数据时,在多线程中会被标记为S(共享),但当其中有一个线程修改了数据之后该线程会修改为E,
并且放在Store Buffer中并且cpu接收到失效消息之后会将失效消息Invalidate Queue中
但是可能会造成这种情况 :
cpu需要使用对应的缓存数据但是还没有来得及处理失效的信息会造成使用旧的数据

原子性
可见性 :
    1 : 使用synchronized关键字,他会重新从内存中读取一遍(其中一个读取之后并且写回)
    2 : 在需要保证线程可见的变量前加volatile关键字(底层是现实禁止cpu的指令重排)